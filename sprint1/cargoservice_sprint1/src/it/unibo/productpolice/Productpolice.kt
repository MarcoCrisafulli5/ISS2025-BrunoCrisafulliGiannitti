/* Generated by AN DISI Unibo */ 
package it.unibo.productpolice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Productpolice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=true ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitsendQuery", cond=doswitch() )
				}	 
				state("waitsendQuery") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("productrequest(PID)"), Term.createTerm("productrequest(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var PID = payloadArg(0).toInt() 
								request("getProduct", "product($PID)" ,"productservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t18",targetState="receiveparseanswer",cond=whenReply("getProductAnswer"))
				}	 
				state("receiveparseanswer") { //this:State
					action { //it:State
						
								   var productok: Boolean = true
						if( checkMsgContent( Term.createTerm("product(JSonString)"), Term.createTerm("product(JSonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var ANSWR = payloadArg(0)
												val parser = JSONParser()
												val jsonObject = parser.parse(ANSWR) as JSONObject
												val productId = (jsonObject["productId"] as Long).toInt()
												val WEIGHT = (jsonObject["weight"] as Long).toInt()
												if (productId != PID) productok = false 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="productaccepted", cond=doswitchGuarded({ productok  
					}) )
					transition( edgeName="goto",targetState="productunknown", cond=doswitchGuarded({! ( productok  
					) }) )
				}	 
				state("productaccepted") { //this:State
					action { //it:State
						answer("productrequest", "productreply", "productreply($WEIGHT)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("productunknown") { //this:State
					action { //it:State
						answer("productrequest", "productreplyfailed", "productreplyfailed(2)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						//terminate(0)
						context!!.removeInternalActor(myself)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
