/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 sysUtil.logMsgs=true  
						CommUtils.outblack("myself=${myself.name}")
						CommUtils.outblack("curState=${currentState.stateName}")
						CommUtils.outblack("currentMsg=${currentMsg}")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t000",targetState="verifyrequest",cond=whenRequest("requesttoload"))
				}	 
				state("verifyrequest") { //this:State
					action { //it:State
						delay(1000) 
						createActorDynamically("productpolice", "_p1", false)
						request("productrequest", "productrequest(ID)" ,"productpolice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="requestaccepted",cond=whenReply("productreply"))
					transition(edgeName="t012",targetState="requestrefused",cond=whenReply("productreplyfailed"))
				}	 
				state("requestaccepted") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("requestrefused") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("s1") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						request("holdrequest", "holdrequest(1)" ,"hold" )  
						delay(5000) 
						request("moverobot", "moverobot(1)" ,"cargorobot" )  
						delay(5000) 
						request("getProduct", "getProduct(1)" ,"productservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="s2",cond=whenReply("onlinereply"))
					transition(edgeName="t04",targetState="work",cond=whenDispatch("msg1"))
					transition(edgeName="t05",targetState="perceiver",cond=whenEvent("sonardata"))
				}	 
				state("perceiver") { //this:State
					action { //it:State
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("s2") { //this:State
					action { //it:State
						delay(500) 
						if( checkMsgContent( Term.createTerm("onlinereply(ARG,STATE)"), Term.createTerm("onlinereply(ARG,X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(500) 
								 var RequestArg0 = payloadArg(0);
												var RequestArg1	= payloadArg(1)
								CommUtils.outblack(" cargo1 receives the reply ($RequestArg0) is ($RequestArg1)")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						delay(500) 
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 var PESO = 1000;
									var PID = 1;
						delay(1000) 
						request("holdrequest", "holdrequest(PESO,PID)" ,"hold" )  
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="handleReply",cond=whenReply("holdreply"))
					transition(edgeName="t17",targetState="handleReply",cond=whenReply("holdreplyfailed"))
				}	 
				state("handleReply") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("holdreply(SLOT,PID)"), Term.createTerm("holdreply(SLOT,PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var RequestArg = payloadArg(0)  
								CommUtils.outblack(" cargo1 receives the reply holdreply($RequestArg)")
						}
						if( checkMsgContent( Term.createTerm("holdreplyfailed(ARG)"), Term.createTerm("holdreplyfailed(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var RequestArg = payloadArg(0)  
								CommUtils.outblack(" cargo1 receives the replyfailed holdreplyfailed($RequestArg)")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
